import type { ISubscriberPayload, ITopicPayload, ITopicSubscribersPayload } from '@novu/node';
import { Novu } from '@novu/node';
import { getAnonymousId } from './identity';

// send Email type
interface CreateSubscriberInputs extends ISubscriberPayload { }

interface UpdateSubscriberInputs {
	subscriberId: string;
	data: ISubscriberPayload;
}

interface CreateTopicInputs extends ITopicPayload { }
interface ITopicsResponse {
	data: any
}

interface AddSubscriberToTopicInputs extends ITopicSubscribersPayload {
	topicKey: string;
	subscribers: string[];
}

export const novu = new Novu(process.env.NOVU_API_KEY!);

/**
 * Create a subscriber in Novu
 * @see https://docs.novu.co/platform/subscribers#1-ahead-of-trigger
 */
export const createSubscriber = async (inputs: CreateSubscriberInputs): Promise<void> => {
	try {
		await novu.subscribers.identify(getAnonymousId(), {
			email: inputs.email,
			firstName: "Subscriber",
		});
	} catch (error) {
		throw new Error('Error sending email subscriber');
	}
}

/**
 * Update a subscriber in Novu
 * @see https://docs.novu.co/platform/subscribers#update-a-subscriber
 */
export const updateSubscriber = async (inputs: UpdateSubscriberInputs): Promise<void> => {
	try {
		await novu.subscribers.update(inputs.subscriberId, inputs.data);
	} catch (error) {
		throw new Error('Error updating subscriber');
	}
}

/**
 * Delete a subscriber in Novu
 * @see https://docs.novu.co/platform/subscribers#delete-a-subscriber
 */
export const deleteSubscriber = async (subscriberId: string): Promise<void> => {
	try {
		await novu.subscribers.delete(subscriberId);
	} catch (error) {
		throw new Error('Error deleting subscriber');
	}
}

/**
 * Creates a topic in Novu
 * If successful this will return the internal ID generated by Novu and the topic key given by the user.
 * @see https://docs.novu.co/platform/topics/#create-a-topic
 */
export const createTopic = async (inputs: CreateTopicInputs): Promise<ITopicsResponse> => {
	try {
		return await novu.topics.create(inputs);
	} catch (error) {
		console.error(error);
		throw new Error('Error creating topic');
	}
}

/**
 * Return the whole topic object from Novu
 * @see https://docs.novu.co/platform/topics/#create-a-topic
 */
export const getTopic = async (key: string): Promise<ITopicsResponse> => {
	try {
		return await novu.topics.get(key);
	} catch (error) {
		throw new Error("Error getting topic");
	}
}

/**
 * Assign subscribers to a topic
 * @see https://docs.novu.co/platform/topics/#subscribers-management-in-a-topic
 */
export const addSubscriberToTopic = async (inputs: AddSubscriberToTopicInputs): Promise<void> => {
	try {
		await novu.topics.addSubscribers(inputs.topicKey, { subscribers: inputs.subscribers });
	} catch (error) {
		throw new Error('Error adding subscribers to topic');
	}
}